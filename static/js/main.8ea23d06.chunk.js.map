{"version":3,"sources":["actions/index.js","services/store.jsx","components/Button/Button.jsx","components/Header/Header.jsx","components/App/App.jsx","serviceWorker.js","index.js"],"names":["src_actions","incrementCounter","_ref","counter","createContext","Provider","Consumer","StoreProvider","_PureComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","initState","actions","_connectActions","inherits","createClass","key","value","_this2","keys","reduce","connected","actionName","setState","react_default","a","createElement","children","PureComponent","StoreConsumer","Button","react","_ref2","className","type","onClick","Header","title","components_Button_Button","App","store_StoreProvider","Actions","components_Header_Header","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAMeA,EAAA,CACbC,iBAPuB,SAAAC,GACvB,MAAO,CACLC,QAFsCD,EAAdC,QAEL,OCAQC,wBAAc,IAArCC,aAAUC,aACLC,EAAb,SAAAC,GACE,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQR,EAAMS,WAAa,GAChCR,EAAKS,QAAUT,EAAKU,gBAAgBX,EAAMU,SAAW,IAHpCT,EADrB,OAAAC,OAAAU,EAAA,EAAAV,CAAAJ,EAAAC,GAAAG,OAAAW,EAAA,EAAAX,CAAAJ,EAAA,EAAAgB,IAAA,kBAAAC,MAAA,SAOkBL,GAAS,IAAAM,EAAAZ,KACvB,OAAOF,OAAOe,KAAKP,GAASQ,OAAO,SAACC,EAAWC,GAE7C,OADAD,EAAUC,GAAc,kBAAMJ,EAAKK,SAASX,EAAQU,KAC7CD,GACP,MAXN,CAAAL,IAAA,SAAAC,MAAA,WAcW,IACCP,EAAmBJ,KAAnBI,MAAOE,EAAYN,KAAZM,QACf,OACEY,EAAAC,EAAAC,cAAC5B,EAAD,CAAUmB,MAAO,CAAEP,QAAOE,YACvBN,KAAKJ,MAAMyB,UAAY,UAlBhC3B,EAAA,CAAmC4B,iBAwBtBC,EAAgB9B,ECLd+B,SAlBA,SAAAnC,GAAkB,IAAfgC,EAAehC,EAAfgC,SAChB,OACEI,EAAA,cAACF,EAAD,KACG,SAAAG,GAAiB,IAAdpB,EAAcoB,EAAdpB,QACF,OACEmB,EAAA,wBACEE,UAAU,SACVC,KAAK,SACLC,QAAS,kBAAMvB,EAAQlB,qBAEtBiC,OCGES,SAZA,SAAAzC,GAAe,IAAZ0C,EAAY1C,EAAZ0C,MAChB,OACEN,EAAA,yBACEA,EAAA,wBAAKM,GACLN,EAAA,cAACF,EAAD,KACG,SAAAG,GAAA,IAAGtB,EAAHsB,EAAGtB,MAAH,OAAeqB,EAAA,mCAAarB,EAAMd,QAAnB,YAElBmC,EAAA,cAACO,EAAD,oBCGSC,mLARX,OACEf,EAAAC,EAAAC,cAACc,EAAD,CAAe7B,UAAW,CAACf,QAAS,GAAIgB,QAAS6B,GAC/CjB,EAAAC,EAAAC,cAACgB,EAAD,CAAQL,MAAM,4CAJJM,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8ea23d06.chunk.js","sourcesContent":["const incrementCounter = ({ counter }) => {\n  return {\n    counter: counter + 1\n  };\n};\n\nexport default {\n  incrementCounter\n};\n","import React, { PureComponent, createContext } from 'react';\n\nconst { Provider, Consumer } = createContext({});\nexport class StoreProvider extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = props.initState || {};\n    this.actions = this._connectActions(props.actions || {});\n  }\n  \n  _connectActions(actions) {\n    return Object.keys(actions).reduce((connected, actionName) => {\n      connected[actionName] = () => this.setState(actions[actionName]);\n      return connected;\n    },{});\n  }\n\n  render() {\n    const { state, actions } = this;\n    return (\n      <Provider value={{ state, actions }}>\n        {this.props.children || null}\n      </Provider>\n    );\n  }\n}\n\nexport const StoreConsumer = Consumer;\n","import * as React from 'react';\nimport { StoreConsumer } from '../../services/store';\nimport './Button.css';\n\nconst Button = ({ children }) => {\n  return (\n    <StoreConsumer>\n      {({ actions }) => {\n        return (\n          <button\n            className=\"Button\"\n            type=\"button\"\n            onClick={() => actions.incrementCounter()}\n          >\n            {children}\n          </button>\n        );\n      }}\n    </StoreConsumer>\n  );\n};\n\nexport default Button;\n","import * as React from 'react';\nimport { StoreConsumer } from '../../services/store';\nimport Button from './../Button/Button';\nimport './Header.css';\n\nconst Header = ({ title }) => {\n  return (\n    <div>\n      <h1>{title}</h1>\n      <StoreConsumer>\n        {({ state }) => <h2>Clicked {state.counter} times</h2>}\n      </StoreConsumer>\n      <Button>Click me</Button>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { Component } from 'react';\nimport Actions from '../../actions';\nimport { StoreProvider } from '../../services/store';\nimport Header from './../Header/Header';\n\nclass App extends Component {\n  render() {\n    return (\n      <StoreProvider initState={{counter: 0}} actions={Actions}>\n        <Header title=\"This is a demo with Context API\" />\n      </StoreProvider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.jsx'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}